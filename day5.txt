
1 st


using System;

namespace ConsoleApp1
{

    // delegate ...  function pointer
    public delegate float cal(int i);  // single cast 
  

    internal class Class1
    {
        // delegates.... function pointer ...
        // Anonymous function....  without name.... 2.0 
        static void Main(string[] args)
        {

            // Anonymous method
            cal obj =  (p) =>
            {
                //Console.WriteLine("Square = "+ p*p);
                int u = 0;
                int t;
                for(t=1;t<=p;t++)
                {
                    u = u + t;
                }

                return u;

            };
            Console.WriteLine("Enter a number");
            int go = int.Parse(Console.ReadLine());
            
            Console.WriteLine(obj.Invoke(go)); ;

            //obj = delegate (int q)
            //{ Console.WriteLine(q * q * q); };
            //obj.Invoke(20);

        }
    }
}


2 nd 



using System;

namespace ConsoleApp1
{

    // delegate ...  function pointer
    public delegate int cal(int i , int h);  // single cast 
  

    internal class Class1
    {
        // delegates.... function pointer ...
        // Anonymous function....  without name.... 2.0 
        static void Main(string[] args)
        {

            // Anonymous method
            cal obj = (p, o) => p > o ? p : o;
            
                //Console.WriteLine("Square = "+ p*p);
                

           
            Console.WriteLine("Enter a number");
            int go = int.Parse(Console.ReadLine());
            Console.WriteLine(" enter the number");
            int ko = int.Parse(Console.ReadLine());
            Console.WriteLine( " the greatest of two is " + obj.Invoke(go,ko)); ;

            //obj = delegate (int q)
            //{ Console.WriteLine(q * q * q); };
            //obj.Invoke(20);

        }
    }
}


3 rd



using System;

namespace ConsoleApp1
{

    // delegate ...  function pointer
    public delegate void cal(int i , int h);  // single cast 
  

    internal class Class1
    {
        // delegates.... function pointer ...
        // Anonymous function....  without name.... 2.0 
        static void Main(string[] args)
        {

            // Anonymous method
            cal obj = (p, o) => Console.WriteLine(" After swapping value1 = {0} and value2 = {1}", x=(x^y^(y=x)),y);
        
          
            
                //Console.WriteLine("Square = "+ p*p);
                

           
            Console.WriteLine("Enter a number");
            int go = int.Parse(Console.ReadLine());
            Console.WriteLine(" enter the number");
            int ko = int.Parse(Console.ReadLine());
             obj.Invoke(go,ko) ;

            //obj = delegate (int q)
            //{ Console.WriteLine(q * q * q); };
            //obj.Invoke(20);

        }
    }
}



 4 th


using System;

namespace ConsoleApp1
{

    // delegate ...  function pointer
    public delegate void cal(int i);  // single cast 
  

    internal class Class1
    {
        // delegates.... function pointer ...
        // Anonymous function....  without name.... 2.0 
        static void Main(string[] args)
        {

            // Anonymous method
            cal obj = delegate(int i)
            {
                int j;
                int g = 0;
               for(j=2;j<=i;j++)
                {
                    if(i%j==0)
                    {
                        g = g + 1;
                    }
                    if(g==2)
                    {
                        break;
                    }
                }
                if (g < 2)
                {

                    Console.WriteLine(" it is   prime");
                }
                if(g==2)
                {
                    Console.WriteLine(" it is not prime");
                }
                
            };
            
                //Console.WriteLine("Square = "+ p*p);
                

           
            Console.WriteLine("Enter a number");
            int go = int.Parse(Console.ReadLine());
            
             obj.Invoke(go) ;

            //obj = delegate (int q)
            //{ Console.WriteLine(q * q * q); };
            //obj.Invoke(20);

        }
    }
}



5 th

using System;

namespace ConsoleApp1
{

    // delegate ...  function pointer
    public delegate void cal(int[] i);  // single cast 
  

    internal class Class1
    {
        // delegates.... function pointer ...
        // Anonymous function....  without name.... 2.0 
        static void Main(string[] args)
        {

            cal obj = delegate(int[] i)
            {
               
                int g = 0;
                int o;
                int h;
                for(o=0;o< i.Length; o++)
                {
                    for(h=o+1;h<i.Length;h++)
                    {
                        if (i[o] > i[h])
                        {
                            g = i[o];
                            i[o] = i[h];
                            i[h] = g;
                        }
                    }
                }
            for (o = 0; o < i.Length;o++)
                {
                Console.WriteLine(i[o]);
            }
                

                };
            
               
            Console.WriteLine("Enter a number");
            Console.WriteLine(" the numbers after sorting are here so");
            int[] ho = { 2, 5, 1, 8, 2, 4 }; 
            
             obj.Invoke(ho) ;


        }
    }
}


5 th


using System;

namespace ConsoleApp1
{

    // delegate ...  function pointer
    public delegate void cal(int i);  // single cast 


    internal class Class1
    {
        // delegates.... function pointer ...
        // Anonymous function....  without name.... 2.0 
        static void Main(string[] args)
        {

            cal obj = delegate (int i)
            {
                int g = 0;
                int o;
                int h;
                for (o = 2; o <= i; o++)
                {
                    g = 0;
                    for (h = 2; h <= o; h++)
                    {
                        if (o % h == 0)
                        {
                            g = g + 1;


                        }
                        if (g == 2)
                        {
                            break;
                        }

                    }



                    if (g < 2)
                    {
                        Console.WriteLine(o + " ");
                    }


                }
            };




            Console.WriteLine("Enter a number");
            int i = int.Parse(Console.ReadLine());
            obj.Invoke(i);

        }

    }
}



